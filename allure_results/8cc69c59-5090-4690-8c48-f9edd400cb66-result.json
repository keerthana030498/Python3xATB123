{"name": "Missing required field firstname", "status": "failed", "statusDetails": {"message": "AssertionError: Response is not in JSON format or is empty.\nassert False", "trace": "self = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n.venv\\Lib\\site-packages\\requests\\models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x000001BF39119D90>, s = 'Internal Server Error', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\json\\decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\n    @allure.title(\"Missing required field firstname\")\n    @allure.description(\"TC01 --- Missing required field firstname\")\n    @allure.testcase(\"TC02\")\n    @pytest.mark.smoke\n    def test_missing_firstname():\n        base_url = \"https://restful-booker.herokuapp.com\"\n        base_path = \"/booking\"\n        URL = base_url + base_path\n    \n        # Headers\n        headers = {\"Content-Type\": \"application/json\"}\n    \n        # Payload\n        json_payload = {\n            \"lastname\": \"Brown\",\n            \"totalprice\": 111,\n            \"depositpaid\": True,\n            \"bookingdates\": {\n                \"checkin\": \"2018-01-01\",\n                \"checkout\": \"2019-01-01\"\n            },\n            \"additionalneeds\": \"Breakfast\"\n        }\n    \n        # Send the POST request\n        response = requests.post(url=URL, headers=headers, json=json_payload)\n    \n        # Convert the response to JSON\n        #responseData = response.json()\n    \n        # Assertions\n        assert response.status_code == 500\n        try:\n>           responseData = response.json()\n\nApi automation\\test_createBooking.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n.venv\\Lib\\site-packages\\requests\\models.py:978: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\n    @allure.title(\"Missing required field firstname\")\n    @allure.description(\"TC01 --- Missing required field firstname\")\n    @allure.testcase(\"TC02\")\n    @pytest.mark.smoke\n    def test_missing_firstname():\n        base_url = \"https://restful-booker.herokuapp.com\"\n        base_path = \"/booking\"\n        URL = base_url + base_path\n    \n        # Headers\n        headers = {\"Content-Type\": \"application/json\"}\n    \n        # Payload\n        json_payload = {\n            \"lastname\": \"Brown\",\n            \"totalprice\": 111,\n            \"depositpaid\": True,\n            \"bookingdates\": {\n                \"checkin\": \"2018-01-01\",\n                \"checkout\": \"2019-01-01\"\n            },\n            \"additionalneeds\": \"Breakfast\"\n        }\n    \n        # Send the POST request\n        response = requests.post(url=URL, headers=headers, json=json_payload)\n    \n        # Convert the response to JSON\n        #responseData = response.json()\n    \n        # Assertions\n        assert response.status_code == 500\n        try:\n            responseData = response.json()\n        except requests.exceptions.JSONDecodeError:\n>           assert False, \"Response is not in JSON format or is empty.\"\nE           AssertionError: Response is not in JSON format or is empty.\nE           assert False\n\nApi automation\\test_createBooking.py:95: AssertionError"}, "description": "TC01 --- Missing required field firstname", "start": 1723544803532, "stop": 1723544804399, "uuid": "1626c2b2-69eb-45f3-81af-53f9129abf35", "historyId": "8c8cc288c2b80cdaad86970fed54f450", "testCaseId": "8c8cc288c2b80cdaad86970fed54f450", "fullName": "Api automation.test_createBooking#test_missing_firstname", "labels": [{"name": "tag", "value": "smoke"}, {"name": "parentSuite", "value": "Api automation"}, {"name": "suite", "value": "test_createBooking"}, {"name": "host", "value": "keerthana"}, {"name": "thread", "value": "8996-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Api automation.test_createBooking"}], "links": [{"type": "tms", "url": "TC02", "name": "TC02"}]}